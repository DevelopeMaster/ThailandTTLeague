export function generateOlympicPairs(players) {
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    const sorted = [...players].sort((a, b) => b.rating - a.rating);
    const pairs = [];

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—á—ë—Ç–Ω–æ–µ, –¥–æ–±–∞–≤–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å bye
    if (sorted.length % 2 !== 0) {
        sorted.push({
            _id: 'bye',
            fullname: 'BYE',
            city: ' - ',
            rating: 0,
            unrated: true,
            isBye: true
        });
    }

    const half = sorted.length / 2;
    for (let i = 0; i < half; i++) {
        const p1 = sorted[i];
        const p2 = sorted[sorted.length - 1 - i];
        pairs.push({ player1: p1, player2: p2 });
    }

    return pairs;
}











// –∫—É—á–∞ BYE –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–±–∞–≤–∏—Ç—Å—è 
// export function generateOlympicPairs(players) {
//     const sorted = [...players].sort((a, b) => b.rating - a.rating);

//     // 1. –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
//     const paddedCount = Math.pow(2, Math.ceil(Math.log2(sorted.length)));

//     // 2. –î–æ–±–∞–≤–ª—è–µ–º BYE –∏–≥—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
//     const playersWithByes = [...sorted];
//     const byeCount = paddedCount - sorted.length;

//     for (let i = 0; i < byeCount; i++) {
//         playersWithByes.push({
//             id: `bye_${i}`,
//             fullname: 'BYE',
//             city: ' - ',
//             logo: '/icons/playerslogo/default_avatar.svg',
//             isBye: true,
//             rating: 0,
//         });
//     }

//     // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
//     const pairs = [];
//     for (let i = 0; i < paddedCount / 2; i++) {
//         const p1 = playersWithByes[i];
//         const p2 = playersWithByes[paddedCount - 1 - i];
//         pairs.push({ player1: p1, player2: p2 });
//     }

//     return pairs;
// } 

export function generateOlympicRounds(players) {
    const sorted = [...players].sort((a, b) => b.rating - a.rating);
    const paddedCount = Math.pow(2, Math.ceil(Math.log2(sorted.length)));
    const playersWithByes = [...sorted];

    const byeCount = paddedCount - sorted.length;
    for (let i = 0; i < byeCount; i++) {
        playersWithByes.push({
            id: `bye_${i}`,
            fullname: 'BYE',
            logo: '/icons/playerslogo/default_avatar.svg',
            isBye: true,
            rating: 0
        });
    }

    const totalRounds = Math.log2(paddedCount);
    const rounds = [];

    // --- Round 1: –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
    const firstRoundPairs = [];
    for (let i = 0; i < paddedCount / 2; i++) {
        const p1 = playersWithByes[i];
        const p2 = playersWithByes[paddedCount - 1 - i];
        firstRoundPairs.push({ player1: p1, player2: p2 });
    }
    rounds.push({ pairs: firstRoundPairs });

    // --- –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
    for (let roundIndex = 1; roundIndex <= totalRounds; roundIndex++) {
        const prevRound = rounds[roundIndex - 1];
        const nextRoundPairs = [];

        for (let i = 0; i < prevRound.pairs.length; i += 2) {
            const pair1 = prevRound.pairs[i];
            const pair2 = prevRound.pairs[i + 1];

            // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–∑ –ø–∞—Ä—ã 1
            const winner1 = getAutoWinner(pair1);
            const winner2 = getAutoWinner(pair2);

            nextRoundPairs.push({
                player1: winner1,
                player2: winner2
            });
        }

        rounds.push({ pairs: nextRoundPairs });
    }

    return rounds;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö BYE, –∏–Ω–∞—á–µ null
function getAutoWinner(pair) {
    if (!pair) return {};
    const { player1, player2 } = pair;

    if (player1?.isBye && !player2?.isBye) return player2;
    if (player2?.isBye && !player1?.isBye) return player1;
    return {}; // –æ–±–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –∏–≥—Ä—ã
}



export function generateOlympicPairsAndWaiting(players) {
    const sorted = [...players].sort((a, b) => b.rating - a.rating);
    const paddedCount = Math.pow(2, Math.ceil(Math.log2(sorted.length)));

    const playersWithByes = [...sorted];
    const byeCount = paddedCount - sorted.length;

    for (let i = 0; i < byeCount; i++) {
        playersWithByes.push({
            id: `bye_${i}`,
            fullname: 'BYE',
            logo: '/icons/playerslogo/default_avatar.svg',
            isBye: true,
            rating: 0
        });
    }

    const pairs = [];
    const waitingOlympicPairs = [];

    for (let i = 0; i < paddedCount / 2; i++) {
        const p1 = playersWithByes[i];
        const p2 = playersWithByes[paddedCount - 1 - i];
        const pair = { player1: p1, player2: p2 };
        pairs.push(pair);

        const hasBye = p1.isBye || p2.isBye;

        if (!hasBye) {
            // –ñ–¥—É—Ç –∏–≥—Ä—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä–æ–∫–∏
            waitingOlympicPairs.push({
                player1Id: p1.id,
                player2Id: p2.id,
                table: null,
                round: 1
            });
        }
        // –ò–≥—Ä—ã —Å BYE –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ
    }

    return {
        pairs,         // –¥–ª—è rounds[0]
        waitingOlympicPairs   // –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ "–æ–∂–∏–¥–∞—é—â–∏—Ö"
    };
}



export function renderOlympicGrid(rounds, containerSelector, totalPlayersCount) {
    const container = document.querySelector(`${containerSelector} .tournament-wrapper`);
    container.innerHTML = '';

    // –î–æ–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
    const paddedCount = Math.pow(2, Math.ceil(Math.log2(totalPlayersCount)));
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: log2(paddedCount) + 1 (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äì –ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
    const totalRounds = Math.log2(paddedCount) + 1;

    const roundsWrapper = document.createElement('div');
    roundsWrapper.className = 'olympic-rounds';

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–∞—É–Ω–¥–∞–º
    for (let roundIndex = 0; roundIndex < totalRounds; roundIndex++) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—É–Ω–¥–µ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        const round = rounds[roundIndex] || { pairs: [] };
        const roundDiv = document.createElement('div');
        roundDiv.className = 'olympic-round';
        roundDiv.setAttribute('data-round', roundIndex + 1);
        roundDiv.innerHTML = `<div class="olympic-round_title">Round ${roundIndex + 1}</div>`;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ –º–∞—Ç—á–µ–π –≤ —Ä–∞—É–Ω–¥–µ
        let expectedMatches;
        if (roundIndex < totalRounds - 1) {
            expectedMatches = paddedCount / Math.pow(2, roundIndex + 1);
        } else {
            expectedMatches = 1; // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: –æ–¥–∏–Ω —Å–ª–æ—Ç –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        }

        // –†–µ–Ω–¥–µ—Ä –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –≤ —Ä–∞—É–Ω–¥–µ
        for (let i = 0; i < expectedMatches; i++) {
            const pair = round.pairs[i] || {};
            const player1 = pair.player1 || {};
            const player2 = pair.player2 || {};

            const matchDiv = document.createElement('div');
            matchDiv.className = 'olympic-round_match';
            // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
            matchDiv.setAttribute('data-round', roundIndex + 1);
            matchDiv.setAttribute('data-match-index', i + 1);

            if (roundIndex === totalRounds - 1) {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (player1)
                const showTrophy = player1?.id && !pair.score1 && !pair.score2;
                matchDiv.innerHTML = `
                    <div class="olympic-round_match_pair">
                        <div class="olympic-round_match_pair_player olympic-round_match_pair_player_winner" data-id="${player1.id || ''}" '>
                            <div class="olympic-round_match_pair_player_wrapper">
                                <div class="olympic-round_match_pair_player_logo" style="background-image: url(${player1.logo || '/icons/playerslogo/default_avatar.svg'})"></div>
                                <span>${player1.fullname || player1.name || '‚Äî'}</span>
                            </div>
                            <span class="olympic-round_match_pair_player_score ${showTrophy ? 'trophy-icon' : ''}">
                                ${showTrophy ? 'üèÜ' : ''}
                            </span>
                        </div>
                    </div>
                `;
            } else {
                // –û–±—ã—á–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã (player1 –∏ player2)
                const score1 = pair.score1;
                const score2 = pair.score2;

                const p1ScoreClass = (score1 != null && score2 != null && score1 > score2) ? 'score-winner' : '';
                const p2ScoreClass = (score1 != null && score2 != null && score2 > score1) ? 'score-winner' : '';

                matchDiv.innerHTML = `
                    <div class="olympic-round_match_pair">
                        <div class="olympic-round_match_pair_player player1" data-id="${player1.id || ''}">
                            <div class="olympic-round_match_pair_player_wrapper">
                                <div class="olympic-round_match_pair_player_logo" style="background-image: url(${player1.logo || '/icons/playerslogo/default_avatar.svg'})"></div>
                                <span>${player1.fullname || player1.name || '‚Äî'}</span>
                            </div>
                            <span class="olympic-round_match_pair_player_score ${p1ScoreClass}">${pair.score1 ?? ''}</span>
                        </div>
                        <div class="olympic-round_match_pair_player player2" data-id="${player2.id || ''}">
                            <div class="olympic-round_match_pair_player_wrapper" >
                                <div class="olympic-round_match_pair_player_logo" style="background-image: url(${player2.logo || '/icons/playerslogo/default_avatar.svg'})"></div>
                                <span>${player2.fullname || player2.name || '‚Äî'}</span>
                            </div>
                            <span class="olympic-round_match_pair_player_score ${p2ScoreClass}">${pair.score2 ?? ''}</span>
                        </div>
                    </div>
                `;
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–≤–∞
            if (roundIndex > 0) {
                const connector = document.createElement('span');
                connector.className = 'olympic-line-left';
                matchDiv.appendChild(connector);
            }

            roundDiv.appendChild(matchDiv);
        }
        roundsWrapper.appendChild(roundDiv);
    }

    container.appendChild(roundsWrapper);

    const allRounds = roundsWrapper.querySelectorAll('.olympic-round');

    if (allRounds.length >= 2) {
        const lastRound = allRounds[allRounds.length - 1];
        const finalRound = allRounds[allRounds.length - 2];

        // –ë–µ—Ä—ë–º margin-top —Ñ–∏–Ω–∞–ª–∞
        const finalMargin = parseFloat(window.getComputedStyle(finalRound).marginTop) || 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã—Å–æ—Ç—ã –ø–∞—Ä—ã (—á—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–ª –ø–æ —Ü–µ–Ω—Ç—Ä—É)
        const marginTopForWinner = finalMargin + 20.5;

        lastRound.style.marginTop = `${marginTopForWinner}px`;
    }
}


// export function calculateOlympicStandings(finishedPairs, totalRounds) {
//     const eliminatedPlayers = new Map(); // key: playerId, value: { player, roundOut }

//     finishedPairs.forEach(pair => {
//         const { player1, player2, score1, score2, round } = pair;
//         if (!player1?.id || !player2?.id) return;

//         const loser = score1 > score2 ? player2 : player1;

//         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—É–Ω–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –≤—ã–ª–µ—Ç–µ–ª
//         if (!eliminatedPlayers.has(loser.id) || eliminatedPlayers.get(loser.id).roundOut < round) {
//             eliminatedPlayers.set(loser.id, {
//                 player: loser,
//                 roundOut: round
//             });
//         }
//     });

//     // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ñ–∏–Ω–∞–ª–∞ (–µ—â—ë –Ω–µ –≤—ã–ª–µ—Ç–µ–ª)
//     const finalMatch = finishedPairs.find(p => p.round === totalRounds - 1);
//     const winner = finalMatch.score1 > finalMatch.score2 ? finalMatch.player1 : finalMatch.player2;

//     // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –º–µ—Å—Ç–∞–º–∏
//     const playersWithPlaces = [];

//     playersWithPlaces.push({ player: winner, place: 1 });

//     const second = finalMatch.score1 > finalMatch.score2 ? finalMatch.player2 : finalMatch.player1;
//     playersWithPlaces.push({ player: second, place: 2 });

//     // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞—É–Ω–¥–∞–º, –≥–¥–µ –≤—ã–ª–µ—Ç–µ–ª–∏
//     const grouped = {};
//     for (let [id, data] of eliminatedPlayers.entries()) {
//         const round = data.roundOut;
//         if (!grouped[round]) grouped[round] = [];
//         grouped[round].push(data.player);
//     }

//     // let currentPlace = 3;
//     // for (let round = totalRounds - 2; round >= 1; round--) {
//     //     if (!grouped[round]) continue;
//     //     grouped[round].forEach(p => {
//     //         playersWithPlaces.push({ player: p, place: currentPlace });
//     //     });
//     //     currentPlace += grouped[round].length;
//     // }
//     let currentPlace = 3;

//     for (let round = totalRounds - 2; round >= 1; round--) {
//         if (!grouped[round]) continue;

//         const group = grouped[round];

//         group.forEach(p => {
//             playersWithPlaces.push({ player: p, place: currentPlace });
//             currentPlace++;
//         });
//     }

//     return playersWithPlaces;
// }

export function calculateOlympicStandings(finishedPairs, totalRounds) {
    const eliminatedPlayers = new Map();

    finishedPairs.forEach(pair => {
        const { player1, player2, score1, score2, round } = pair;
        if (!player1?.id || !player2?.id) return;

        const loser = score1 > score2 ? player2 : player1;

        if (!eliminatedPlayers.has(loser.id) || eliminatedPlayers.get(loser.id).roundOut < round) {
            eliminatedPlayers.set(loser.id, {
                player: loser,
                roundOut: round
            });
        }
    });

    const finalMatch = finishedPairs.find(p => p.round === totalRounds - 1);
    const winner = finalMatch.score1 > finalMatch.score2 ? finalMatch.player1 : finalMatch.player2;
    const second = finalMatch.score1 > finalMatch.score2 ? finalMatch.player2 : finalMatch.player1;
    
    const playersWithPlaces = [];
    playersWithPlaces.push({ player: winner, place: 1 });
    playersWithPlaces.push({ player: second, place: 2 });
    console.log('playersWithPlaces', playersWithPlaces);
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –ø–æ —Ä–∞—É–Ω–¥—É –≤—ã–ª–µ—Ç–∞
    const grouped = {};
    for (let [id, data] of eliminatedPlayers.entries()) {
        const round = data.roundOut;
        if (!grouped[round]) grouped[round] = [];
        grouped[round].push(data.player);
    }

    // –î–≤–∏–≥–∞–µ–º—Å—è –æ—Ç —Ä–∞—É–Ω–¥–æ–≤ –±–ª–∏–∂–µ –∫ —Ñ–∏–Ω–∞–ª—É ‚Äî –∫ –Ω–∞—á–∞–ª—É
    let currentPlace = 3;
    for (let round = totalRounds - 2; round >= 1; round--) {
        if (!grouped[round]) continue;

        const group = grouped[round];
        group.forEach(p => {
            playersWithPlaces.push({ player: p, place: currentPlace });
        });

        // –ú–µ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 1 ‚Äî –≤—Å–µ –≤ –≥—Ä—É–ø–ø–µ –¥–µ–ª—è—Ç —ç—Ç–æ –º–µ—Å—Ç–æ
        currentPlace += 1;
    }

    return playersWithPlaces;
}



export function getOlympicPlayerStats(finishedPairs) {
    const stats = {};

    finishedPairs.forEach(pair => {
        const { player1, player2, score1, score2 } = pair;

        if (!player1?.id || !player2?.id) return;

        [player1, player2].forEach(player => {
            if (!stats[player.id]) {
                stats[player.id] = {
                    player,
                    games: 0,
                    wins: 0,
                    losses: 0,
                    setsWon: 0,
                    setsLost: 0
                };
            }
        });

        stats[player1.id].games++;
        stats[player2.id].games++;

        if (score1 > score2) {
            stats[player1.id].wins++;
            stats[player2.id].losses++;
        } else {
            stats[player2.id].wins++;
            stats[player1.id].losses++;
        }

        // –ü–æ–¥—Å—á—ë—Ç —Å–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á—ë—Ç–∞
        stats[player1.id].setsWon += score1;
        stats[player1.id].setsLost += score2;

        stats[player2.id].setsWon += score2;
        stats[player2.id].setsLost += score1;
    });

    return stats;
}

// 
// 
// function getOlympicPlayerStats(finishedPairs) {
//     const stats = {};

//     finishedPairs.forEach(pair => {
//         const { player1, player2, score1, score2, sets } = pair;

//         if (!player1?.id || !player2?.id) return;

//         [player1, player2].forEach(player => {
//             if (!stats[player.id]) {
//                 stats[player.id] = {
//                     player,
//                     games: 0,
//                     wins: 0,
//                     losses: 0,
//                     setsWon: 0,
//                     setsLost: 0
//                 };
//             }
//         });

//         stats[player1.id].games++;
//         stats[player2.id].games++;

//         if (score1 > score2) {
//             stats[player1.id].wins++;
//             stats[player2.id].losses++;
//         } else {
//             stats[player2.id].wins++;
//             stats[player1.id].losses++;
//         }

//         // –ü–æ–¥—Å—á—ë—Ç —Å–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
//         if (sets && Array.isArray(sets)) {
//             sets.forEach(set => {
//                 const [s1, s2] = set.split('-').map(Number);
//                 if (!isNaN(s1) && !isNaN(s2)) {
//                     stats[player1.id].setsWon += s1;
//                     stats[player1.id].setsLost += s2;
//                     stats[player2.id].setsWon += s2;
//                     stats[player2.id].setsLost += s1;
//                 }
//             });
//         }
//     });

//     return stats;
// }




























// export function renderOlympicGrid(rounds, containerSelector, totalPlayersCount) {
//     const container = document.querySelector(`${containerSelector} .tournament-wrapper`);
//     container.innerHTML = '';

//     const totalRounds = Math.ceil(Math.log2(totalPlayersCount)) + 1;

//     const roundsWrapper = document.createElement('div');
//     roundsWrapper.className = 'olympic-rounds';

//     for (let roundIndex = 0; roundIndex < totalRounds; roundIndex++) {
//         const round = rounds[roundIndex] || { pairs: [] };
//         const roundDiv = document.createElement('div');
//         roundDiv.className = 'olympic-round';
//         roundDiv.innerHTML = `<div class="olympic-round_title">Round ${roundIndex + 1}</div>`;

//         const expectedMatches = Math.max(1, Math.pow(2, totalRounds - roundIndex - 2));

//         for (let i = 0; i < expectedMatches; i++) {
//             const pair = round.pairs[i] || {};
//             const player1 = pair.player1 || {};
//             const player2 = pair.player2 || {};

//             const matchDiv = document.createElement('div');
//             matchDiv.className = 'olympic-round_match';

//             if (roundIndex === totalRounds - 1) {
//                 // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç: —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
//                 matchDiv.innerHTML = `
//                     <div class="olympic-round_match_pair">
//                         <div class="olympic-round_match_pair_player lympic-round_match_pair_player_winner winner">
//                             <div class="olympic-round_match_pair_player_wrapper" data-id="${player1.id || ''}">
//                                 <img src="${player1.logo || '/icons/playerslogo/default_avatar.svg'}">
//                                 <span>${player1.fullname || player1.name || '‚Äî'}</span>
//                             </div>
//                             <span class="olympic-round_match_pair_player_score">${pair.score1 ?? '0'}</span>
//                         </div>
//                     </div>
//                 `;
//             } else {
//                 // –í—Å–µ –æ–±—ã—á–Ω—ã–µ —Ä–∞—É–Ω–¥—ã: –¥–≤–µ —Å—Ç–æ—Ä–æ–Ω—ã
//                 matchDiv.innerHTML = `
//                     <div class="olympic-round_match_pair">
//                         <div class="olympic-round_match_pair_player player1">
//                             <div class="olympic-round_match_pair_player_wrapper" data-id="${player1.id || ''}">
//                                 <img src="${player1.logo || '/icons/playerslogo/default_avatar.svg'}">
//                                 <span>${player1.fullname || player1.name || '‚Äî'}</span>
//                             </div>
//                             <span class="olympic-round_match_pair_player_score">${pair.score1 ?? '0'}</span>
//                         </div>
//                         <div class="olympic-round_match_pair_player player2">
//                             <div class="olympic-round_match_pair_player_wrapper" data-id="${player2.id || ''}">
//                                 <img src="${player2.logo || '/icons/playerslogo/default_avatar.svg'}">
//                                 <span>${player2.fullname || player2.name || '‚Äî'}</span>
//                             </div>
//                             <span class="olympic-round_match_pair_player_score">${pair.score2 ?? '0'}</span>
//                         </div>
//                     </div>
//                 `;
//             }
//             if (roundIndex > 0) {
//                 const connector = document.createElement('span');
//                 connector.className = 'olympic-line-left';
//                 matchDiv.appendChild(connector);
//             }

//             roundDiv.appendChild(matchDiv);
//         }

//         roundsWrapper.appendChild(roundDiv);
//     }

//     container.appendChild(roundsWrapper);
// }



